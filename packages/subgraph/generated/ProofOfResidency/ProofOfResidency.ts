// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CommitmentCreated extends ethereum.Event {
  get params(): CommitmentCreated__Params {
    return new CommitmentCreated__Params(this);
  }
}

export class CommitmentCreated__Params {
  _event: CommitmentCreated;

  constructor(event: CommitmentCreated) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get committer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get commitment(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class CommitterAdded extends ethereum.Event {
  get params(): CommitterAdded__Params {
    return new CommitterAdded__Params(this);
  }
}

export class CommitterAdded__Params {
  _event: CommitterAdded;

  constructor(event: CommitterAdded) {
    this._event = event;
  }

  get committer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CommitterRemoved extends ethereum.Event {
  get params(): CommitterRemoved__Params {
    return new CommitterRemoved__Params(this);
  }
}

export class CommitterRemoved__Params {
  _event: CommitterRemoved;

  constructor(event: CommitterRemoved) {
    this._event = event;
  }

  get committer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fundsLost(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get forceReclaim(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PriceChanged extends ethereum.Event {
  get params(): PriceChanged__Params {
    return new PriceChanged__Params(this);
  }
}

export class PriceChanged__Params {
  _event: PriceChanged;

  constructor(event: PriceChanged) {
    this._event = event;
  }

  get newPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenChallengeCompleted extends ethereum.Event {
  get params(): TokenChallengeCompleted__Params {
    return new TokenChallengeCompleted__Params(this);
  }
}

export class TokenChallengeCompleted__Params {
  _event: TokenChallengeCompleted;

  constructor(event: TokenChallengeCompleted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenChallenged extends ethereum.Event {
  get params(): TokenChallenged__Params {
    return new TokenChallenged__Params(this);
  }
}

export class TokenChallenged__Params {
  _event: TokenChallenged;

  constructor(event: TokenChallenged) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProofOfResidency__commitmentsResult {
  value0: BigInt;
  value1: Bytes;
  value2: Address;
  value3: BigInt;

  constructor(value0: BigInt, value1: Bytes, value2: Address, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValidAt(): BigInt {
    return this.value0;
  }

  getCommitment(): Bytes {
    return this.value1;
  }

  getCommitter(): Address {
    return this.value2;
  }

  getValue(): BigInt {
    return this.value3;
  }
}

export class ProofOfResidency__committerContributionsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLockedUntil(): BigInt {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class ProofOfResidency extends ethereum.SmartContract {
  static bind(address: Address): ProofOfResidency {
    return new ProofOfResidency("ProofOfResidency", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitmentPeriodIsUpcoming(): boolean {
    let result = super.call(
      "commitmentPeriodIsUpcoming",
      "commitmentPeriodIsUpcoming():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_commitmentPeriodIsUpcoming(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "commitmentPeriodIsUpcoming",
      "commitmentPeriodIsUpcoming():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  commitmentPeriodIsValid(): boolean {
    let result = super.call(
      "commitmentPeriodIsValid",
      "commitmentPeriodIsValid():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_commitmentPeriodIsValid(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "commitmentPeriodIsValid",
      "commitmentPeriodIsValid():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  commitments(param0: Address): ProofOfResidency__commitmentsResult {
    let result = super.call(
      "commitments",
      "commitments(address):(uint256,bytes32,address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new ProofOfResidency__commitmentsResult(
      result[0].toBigInt(),
      result[1].toBytes(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_commitments(
    param0: Address
  ): ethereum.CallResult<ProofOfResidency__commitmentsResult> {
    let result = super.tryCall(
      "commitments",
      "commitments(address):(uint256,bytes32,address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProofOfResidency__commitmentsResult(
        value[0].toBigInt(),
        value[1].toBytes(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  committerContributions(
    param0: Address
  ): ProofOfResidency__committerContributionsResult {
    let result = super.call(
      "committerContributions",
      "committerContributions(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new ProofOfResidency__committerContributionsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_committerContributions(
    param0: Address
  ): ethereum.CallResult<ProofOfResidency__committerContributionsResult> {
    let result = super.tryCall(
      "committerContributions",
      "committerContributions(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProofOfResidency__committerContributionsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  countryTokenCounts(param0: i32): BigInt {
    let result = super.call(
      "countryTokenCounts",
      "countryTokenCounts(uint16):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toBigInt();
  }

  try_countryTokenCounts(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countryTokenCounts",
      "countryTokenCounts(uint16):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(country: i32, commitment: string): BigInt {
    let result = super.call("mint", "mint(uint16,string):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(country)),
      ethereum.Value.fromString(commitment)
    ]);

    return result[0].toBigInt();
  }

  try_mint(country: i32, commitment: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint16,string):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(country)),
      ethereum.Value.fromString(commitment)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  projectTreasury(): Address {
    let result = super.call(
      "projectTreasury",
      "projectTreasury():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_projectTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "projectTreasury",
      "projectTreasury():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reservePrice(): BigInt {
    let result = super.call("reservePrice", "reservePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reservePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reservePrice", "reservePrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  respondToChallenge(
    tokenId: BigInt,
    country: i32,
    commitment: string
  ): boolean {
    let result = super.call(
      "respondToChallenge",
      "respondToChallenge(uint256,uint16,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(country)),
        ethereum.Value.fromString(commitment)
      ]
    );

    return result[0].toBoolean();
  }

  try_respondToChallenge(
    tokenId: BigInt,
    country: i32,
    commitment: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "respondToChallenge",
      "respondToChallenge(uint256,uint16,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(country)),
        ethereum.Value.fromString(commitment)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenChallengeExists(owner: Address): boolean {
    let result = super.call(
      "tokenChallengeExists",
      "tokenChallengeExists(address):(bool)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBoolean();
  }

  try_tokenChallengeExists(owner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenChallengeExists",
      "tokenChallengeExists(address):(bool)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenChallengeExpired(owner: Address): boolean {
    let result = super.call(
      "tokenChallengeExpired",
      "tokenChallengeExpired(address):(bool)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBoolean();
  }

  try_tokenChallengeExpired(owner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenChallengeExpired",
      "tokenChallengeExpired(address):(bool)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialCommitter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialTreasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get initialBaseUri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get initialPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCommitterCall extends ethereum.Call {
  get inputs(): AddCommitterCall__Inputs {
    return new AddCommitterCall__Inputs(this);
  }

  get outputs(): AddCommitterCall__Outputs {
    return new AddCommitterCall__Outputs(this);
  }
}

export class AddCommitterCall__Inputs {
  _call: AddCommitterCall;

  constructor(call: AddCommitterCall) {
    this._call = call;
  }

  get newCommitter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddCommitterCall__Outputs {
  _call: AddCommitterCall;

  constructor(call: AddCommitterCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnFailedChallengesCall extends ethereum.Call {
  get inputs(): BurnFailedChallengesCall__Inputs {
    return new BurnFailedChallengesCall__Inputs(this);
  }

  get outputs(): BurnFailedChallengesCall__Outputs {
    return new BurnFailedChallengesCall__Outputs(this);
  }
}

export class BurnFailedChallengesCall__Inputs {
  _call: BurnFailedChallengesCall;

  constructor(call: BurnFailedChallengesCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class BurnFailedChallengesCall__Outputs {
  _call: BurnFailedChallengesCall;

  constructor(call: BurnFailedChallengesCall) {
    this._call = call;
  }
}

export class ChallengeCall extends ethereum.Call {
  get inputs(): ChallengeCall__Inputs {
    return new ChallengeCall__Inputs(this);
  }

  get outputs(): ChallengeCall__Outputs {
    return new ChallengeCall__Outputs(this);
  }
}

export class ChallengeCall__Inputs {
  _call: ChallengeCall;

  constructor(call: ChallengeCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ChallengeCall__Outputs {
  _call: ChallengeCall;

  constructor(call: ChallengeCall) {
    this._call = call;
  }
}

export class CommitAddressCall extends ethereum.Call {
  get inputs(): CommitAddressCall__Inputs {
    return new CommitAddressCall__Inputs(this);
  }

  get outputs(): CommitAddressCall__Outputs {
    return new CommitAddressCall__Outputs(this);
  }
}

export class CommitAddressCall__Inputs {
  _call: CommitAddressCall;

  constructor(call: CommitAddressCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get commitment(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CommitAddressCall__Outputs {
  _call: CommitAddressCall;

  constructor(call: CommitAddressCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get country(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get commitment(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ReclaimExpiredContributionsCall extends ethereum.Call {
  get inputs(): ReclaimExpiredContributionsCall__Inputs {
    return new ReclaimExpiredContributionsCall__Inputs(this);
  }

  get outputs(): ReclaimExpiredContributionsCall__Outputs {
    return new ReclaimExpiredContributionsCall__Outputs(this);
  }
}

export class ReclaimExpiredContributionsCall__Inputs {
  _call: ReclaimExpiredContributionsCall;

  constructor(call: ReclaimExpiredContributionsCall) {
    this._call = call;
  }

  get unclaimedAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ReclaimExpiredContributionsCall__Outputs {
  _call: ReclaimExpiredContributionsCall;

  constructor(call: ReclaimExpiredContributionsCall) {
    this._call = call;
  }
}

export class RemoveCommitterCall extends ethereum.Call {
  get inputs(): RemoveCommitterCall__Inputs {
    return new RemoveCommitterCall__Inputs(this);
  }

  get outputs(): RemoveCommitterCall__Outputs {
    return new RemoveCommitterCall__Outputs(this);
  }
}

export class RemoveCommitterCall__Inputs {
  _call: RemoveCommitterCall;

  constructor(call: RemoveCommitterCall) {
    this._call = call;
  }

  get removedCommitter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get forceReclaim(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RemoveCommitterCall__Outputs {
  _call: RemoveCommitterCall;

  constructor(call: RemoveCommitterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RespondToChallengeCall extends ethereum.Call {
  get inputs(): RespondToChallengeCall__Inputs {
    return new RespondToChallengeCall__Inputs(this);
  }

  get outputs(): RespondToChallengeCall__Outputs {
    return new RespondToChallengeCall__Outputs(this);
  }
}

export class RespondToChallengeCall__Inputs {
  _call: RespondToChallengeCall;

  constructor(call: RespondToChallengeCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get country(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get commitment(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class RespondToChallengeCall__Outputs {
  _call: RespondToChallengeCall;

  constructor(call: RespondToChallengeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get newBaseUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetPriceCall extends ethereum.Call {
  get inputs(): SetPriceCall__Inputs {
    return new SetPriceCall__Inputs(this);
  }

  get outputs(): SetPriceCall__Outputs {
    return new SetPriceCall__Outputs(this);
  }
}

export class SetPriceCall__Inputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }

  get newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPriceCall__Outputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }
}

export class SetProjectTreasuryCall extends ethereum.Call {
  get inputs(): SetProjectTreasuryCall__Inputs {
    return new SetProjectTreasuryCall__Inputs(this);
  }

  get outputs(): SetProjectTreasuryCall__Outputs {
    return new SetProjectTreasuryCall__Outputs(this);
  }
}

export class SetProjectTreasuryCall__Inputs {
  _call: SetProjectTreasuryCall;

  constructor(call: SetProjectTreasuryCall) {
    this._call = call;
  }

  get newTreasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProjectTreasuryCall__Outputs {
  _call: SetProjectTreasuryCall;

  constructor(call: SetProjectTreasuryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
