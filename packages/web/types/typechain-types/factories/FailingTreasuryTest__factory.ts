/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FailingTreasuryTest,
  FailingTreasuryTestInterface,
} from "../FailingTreasuryTest";

const _abi = [
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060758061001e6000396000f3fe6080604052348015600f57600080fd5b50603a7f237368df3b5ea58221da8c127ed5bd80f08354289913d5c07e2af7bb08b4dee960001b603c565b005b5056fea264697066735822122089e50ff4a18ec62bde14778e1f8879739d11476e7238e5f7ef9efab59f3e740564736f6c63430008070033";

type FailingTreasuryTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FailingTreasuryTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FailingTreasuryTest__factory extends ContractFactory {
  constructor(...args: FailingTreasuryTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FailingTreasuryTest";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FailingTreasuryTest> {
    return super.deploy(overrides || {}) as Promise<FailingTreasuryTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FailingTreasuryTest {
    return super.attach(address) as FailingTreasuryTest;
  }
  connect(signer: Signer): FailingTreasuryTest__factory {
    return super.connect(signer) as FailingTreasuryTest__factory;
  }
  static readonly contractName: "FailingTreasuryTest";
  public readonly contractName: "FailingTreasuryTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FailingTreasuryTestInterface {
    return new utils.Interface(_abi) as FailingTreasuryTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FailingTreasuryTest {
    return new Contract(address, _abi, signerOrProvider) as FailingTreasuryTest;
  }
}
